{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import iziToast from \"izitoast\";  \nimport \"izitoast/dist/css/iziToast.min.css\";  \n\nconst API_KEY = \"46878404-43e11e495eedf0f56c253a7d9\";  \nconst API_URL = \"https://pixabay.com/api/\";  \n\nexport function fetchData(inputValue) {  \n    // Проверка на пустое значение  \n    if (!inputValue || inputValue.trim() === \"\") {  \n        iziToast.error({  \n            title: 'Ошибка',  \n            message: \"Введите запрос.\",  \n            position: 'topCenter',  \n            backgroundColor: '#ef4040',  \n        });  \n        return Promise.resolve([]); // Возвращаем пустой массив при отсутствии запроса  \n    }  \n\n    const randomPage = Math.floor(Math.random() * 10) + 1;  \n\n    const options = new URLSearchParams({  \n        key: API_KEY,  \n        q: inputValue,  \n        image_type: \"photo\",  \n        orientation: \"horizontal\",  \n        safesearch: true,  \n        page: randomPage,  \n        per_page: 15  \n    });  \n\n    const urlWithParams = `${API_URL}?${options.toString()}`;  \n\n    return fetch(urlWithParams)  \n        .then(res => {  \n            if (!res.ok) {  \n                throw new Error(\"Ошибка при получении данных от API\");  \n            }  \n            return res.json();  \n        })  \n        .then(data => {  \n            if (data.hits.length === 0) {  \n                iziToast.error({  \n                    title: 'Ошибка',  \n                    message: \"Извините, изображения не найдены по вашему запросу. Попробуйте снова!\",  \n                    position: 'topCenter',  \n                    backgroundColor: '#ef4040',  \n                });  \n                return []; // Возвращаем пустой массив, если нет результатов  \n            }  \n            return data.hits; // Возвращаем найденные изображения  \n        })  \n        .catch(err => {  \n            console.error(err); // Логируем ошибку  \n            iziToast.error({  \n                title: 'Ошибка',  \n                message: 'Произошла ошибка при получении данных. Попробуйте снова.',  \n                position: 'topCenter',  \n                backgroundColor: '#ef4040',  \n            });  \n            return []; // Возвращаем пустой массив в случае ошибки  \n        });  \n}","const list = document.querySelector(\".list\");  \n\nexport function formResults(images) {  \n    // Проверка на наличие изображений  \n    if (!images || images.length === 0) {  \n        list.innerHTML = \"<p>No images found.</p>\"; // Сообщение об отсутствии изображений  \n        return;  \n    }  \n\n    // Генерация HTML разметки для каждого изображения  \n    const markup = images.map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => `  \n        <div class=\"gallery-item\">  \n            <a href=\"${largeImageURL}\" target=\"_blank\" rel=\"noopener noreferrer\">  \n                <img src=\"${webformatURL}\" alt=\"${tags || 'Image'}\" width=\"360\" height=\"200\" loading=\"lazy\"/>  \n            </a>  \n            <div class=\"info\">  \n                <p class=\"info-text\"><b class=\"xz\">Likes:</b> ${likes}</p>  \n                <p class=\"info-text\"><b class=\"xz\">Views:</b> ${views}</p>  \n                <p class=\"info-text\"><b class=\"xz\">Comments:</b> ${comments}</p>  \n                <p class=\"info-text\"><b class=\"xz\">Downloads:</b> ${downloads}</p>  \n            </div>  \n        </div>  \n    `).join(\"\");  \n\n    // Обновление содержимого списка изображений  \n    list.innerHTML = \"\"; // Очищаем предыдущие результаты  \n    list.insertAdjacentHTML(\"beforeend\", markup); // Вставляем новые изображения  \n}","import { fetchData } from \"./js/pixabay-api\";\nimport { formResults } from \"./js/render-functions\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const searchForm = document.querySelector(\".search-form\");\n    const inputText = document.querySelector(\".search-form input\");\n    const loader = document.querySelector(\".loader\");\n    const gallery = document.querySelector(\".gallery\"); // галерея для изображений\n    let lightbox; // переменная для хранения экземпляра SimpleLightbox\n\n    if (!searchForm || !inputText || !loader || !gallery) {\n        console.error(\"Не удалось найти один или несколько элементов в DOM.\");\n        return;\n    }\n\n    searchForm.addEventListener(\"submit\", handleForm);\n\n    function handleForm(event) {\n        event.preventDefault();\n        const inputValue = inputText.value.trim(); // получаем значение из поля ввода\n\n        if (inputValue === \"\") { // проверяем, что поле не пустое\n            iziToast.info({\n                title: 'Error',\n                message: 'Fill in the request field',\n            });\n            return;\n        }\n\n        showLoader(); // показываем загрузчик\n\n        fetchData(inputValue) // вызываем функцию для получения данных\n            .then(res => {\n                if (Array.isArray(res) && res.length > 0) { // проверка, что res - массив с данными\n                    formResults(res); // отображаем результаты\n                    if (lightbox) {\n                        lightbox.refresh(); // обновляем lightbox, если он уже существует\n                    } else {\n                        // инициализируем lightbox при первом вызове\n                        lightbox = new SimpleLightbox('.gallery-item a', {\n                            captionsData: 'alt', // подписи для изображений из атрибута alt\n                            captionDelay: 250, // задержка перед показом подписи\n                        });\n                    }\n                } else {\n                    iziToast.warning({\n                        title: 'No Results',\n                        message: 'No images found. Try a different search.',\n                    });\n                }\n            })\n            .catch(error => {\n                console.error(\"Ошибка при загрузке данных:\", error);\n                iziToast.error({\n                    position: 'topRight',\n                    title: 'Error',\n                    message: 'An error occurred while retrieving images. Try again!',\n                    backgroundColor: '#ef4040',\n                });\n            })\n            .finally(() => {\n                hideLoader(); // скрываем загрузчик\n                searchForm.reset(); // сбрасываем форму\n            });\n    }\n\n    function showLoader() {\n        loader.style.display = \"block\"; // показываем загрузчик\n    }\n\n    function hideLoader() {\n        loader.style.display = \"none\"; // скрываем загрузчик\n    }\n});\n"],"names":["API_KEY","API_URL","fetchData","inputValue","iziToast","randomPage","options","urlWithParams","res","data","err","list","formResults","images","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","searchForm","inputText","loader","gallery","lightbox","handleForm","event","showLoader","SimpleLightbox","error","hideLoader"],"mappings":"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"}